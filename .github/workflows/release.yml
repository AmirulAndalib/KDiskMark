name: Release
on:
  release:
    types: created
jobs:
  pack:
    name: Pack source tarball
    runs-on: ubuntu-latest
    steps:
      - name: Clone repo
        uses: actions/checkout@v2
        with:
          submodules: recursive

      - name: Create source tarball
        run: |
          SOURCE_NAME=$(awk -F/ '{print $NF}' <<<"${{ github.repository }}")-$(awk -F/ '{print $NF}' <<<"${{ github.ref }}")
          git ls-files --recurse-submodules | \
          tar --exclude-vcs --transform "s|^|$SOURCE_NAME/|S" -ca -T - -f ../$SOURCE_NAME-source.tar.gz
      - name: Upload source tarball
        uses: AButler/upload-release-assets@v2.0
        with:
          files: '../*.tar.gz'
          repo-token: ${{ secrets.GITHUB_TOKEN }}

  release:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04]
        arch: [amd64]
        include:
          - os: ubuntu-20.04
            cmake-defines: '-D CPACK_GENERATOR="DEB;RPM;7Z" -D CMAKE_BUILD_TYPE=Release'
            upload-files: 'build/*.deb;build/*.rpm;build/*.7z'
    steps:
    - name: Clone repo
      uses: actions/checkout@v2.2.0
      with:
        submodules: recursive

    - name: Install dependent apt packages
      if: runner.os == 'Linux'
      run: |
        sudo apt-get update
        sudo apt-get install qttools5-dev libpolkit-qt5-1-dev rpm
        wget http://launchpadlibrarian.net/590905036/extra-cmake-modules_5.92.0-0ubuntu1_amd64.deb
        sudo dpkg -i extra-cmake-modules_5.92.0-0ubuntu1_amd64.deb

    - name: Build
      run: |
        mkdir build
        cd build
        cmake ${{ matrix.cmake-defines }} ..
        sed -i 's|etc/dbus-1|share/dbus-1|g' cmake_install.cmake
        cmake --build . --target package --parallel 2 --config Release

    - name: Upload
      uses: AButler/upload-release-assets@v2.0
      with:
        files: ${{ matrix.upload-files }}
        repo-token: ${{ secrets.GITHUB_TOKEN }}

  appimage:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-20.04]
        arch: [amd64]
        include:
          - os: ubuntu-20.04
            bundled-fio: '3.34'
            cmake-defines: '-D CMAKE_BUILD_TYPE=Release'
            upload-files: 'build/{*.AppImage,*.AppImage.zsync}'
    steps:
    - name: Clone repo
      uses: actions/checkout@v2.2.0
      with:
        ref: 'legacy'
        submodules: recursive

    - name: Install dependent packages
      run: |
        sudo apt-get update
        sudo apt-get install python3-pip libaio-dev qt5-default qttools5-dev kde-style-breeze breeze-icon-theme
        wget http://launchpadlibrarian.net/590905036/extra-cmake-modules_5.92.0-0ubuntu1_amd64.deb
        sudo dpkg -i extra-cmake-modules_5.92.0-0ubuntu1_amd64.deb

    - name: Install Qt
      run: |
        sudo pip3 install setuptools
        sudo pip3 install aqtinstall
        sudo aqt install --outputdir /opt/Qt 5.15.1 linux desktop

    - name: Prepare 3rd-party
      run: |
        mkdir 3rd-party
        cd 3rd-party
        wget https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage
        chmod +x ./linuxdeployqt-continuous-x86_64.AppImage
        wget https://github.com/axboe/fio/archive/refs/tags/fio-${{ matrix.bundled-fio }}.tar.gz
        tar -xzf fio-${{ matrix.bundled-fio }}.tar.gz
        cd ..

    - name: Build
      run: |
        REPO_NAME=$(awk -F/ '{print $NF}' <<<"${{ github.repository }}")
        APP_VERSION=$(awk -F/ '{print $NF}' <<<"${{ github.ref }}")
        APPIMAGE_NAME=$REPO_NAME-$APP_VERSION-fio-${{ matrix.bundled-fio }}-x86_64.AppImage
        mkdir build
        cd build
        mkdir appdir
        echo -e '#!/bin/bash\nHERE="$(dirname "$(readlink -f "${0}")")"\nexport PATH="$HERE/usr/bin/:$PATH"\n$HERE/usr/bin/kdiskmark "$@"' > appdir/AppRun
        chmod +x ./appdir/AppRun
        cmake ${{ matrix.cmake-defines }} -DCMAKE_INSTALL_PREFIX=/usr -DCMAKE_PREFIX_PATH=/opt/Qt/5.15.1/gcc_64/ ..
        sed -i "s|XAUTHORITY kdiskmark|XAUTHORITY ./$APPIMAGE_NAME|g" ../src/mainwindow.cpp
        make DESTDIR=appdir -j$(nproc) install
        cd ../3rd-party/fio-fio-${{ matrix.bundled-fio }}
        ./configure --disable-native
        make DESTDIR="$(pwd)/../../build/appdir" prefix=/usr install
        cd ../../build
        cp -a /usr/share/icons/breeze appdir/usr/share/icons/
        sudo mkdir /opt/Qt/5.15.1/gcc_64/plugins/styles/
        sudo cp /usr/lib/x86_64-linux-gnu/qt5/plugins/styles/breeze.so /opt/Qt/5.15.1/gcc_64/plugins/styles/
        export VERSION=$APP_VERSION-fio-${{ matrix.bundled-fio }}
        ../3rd-party/linuxdeployqt-continuous-x86_64.AppImage appdir/usr/share/applications/*.desktop -appimage -qmake=/opt/Qt/5.15.1/gcc_64/bin/qmake \
          -extra-plugins=styles/breeze.so -updateinformation="gh-releases-zsync|${{ github.repository_owner }}|$REPO_NAME|latest|*.zsync"

    - name: Upload
      uses: AButler/upload-release-assets@v2.0
      with:
        files: ${{ matrix.upload-files }}
        repo-token: ${{ secrets.GITHUB_TOKEN }}
